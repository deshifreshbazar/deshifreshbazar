generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("SUPABASE_DATABASE")
  directUrl = env("NEXT_PUBLIC_SUPABASE_URL")
}

model User {
  id        String     @id @default(cuid())
  name      String
  email     String     @unique
  password  String
  role      Role       @default(USER)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  cart      CartItem[]
  orders    Order[]
}

model Product {
  id          String      @id @default(cuid())
  name        String
  slug        String      @unique
  description String      @db.Text
  details     String?
  price       Float
  image       String
  category    Category    @relation(fields: [categoryId], references: [id])
  categoryId  String
  stock       Int         @default(0)
  sequence    Int         @default(0)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  cartItems   CartItem[]
  orderItems  OrderItem[]
  packages    Package[]

  @@index([sequence])
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?
  image       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]
}

model Package {
  id        String   @id @default(cuid())
  name      String
  price     Float
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id])
}

model Order {
  id                 String      @id @default(cuid())
  userId             String?
  customerName       String
  customerEmail      String?
  customerPhone      String
  shippingAddress    String
  shippingCity       String
  shippingPostalCode String
  shippingCountry    String
  subtotal           Float
  shippingCost       Float
  totalAmount        Float
  paymentMethod      String
  status             OrderStatus @default(PENDING)
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  user               User?       @relation(fields: [userId], references: [id])
  items              OrderItem[]
}

model OrderItem {
  id           String   @id @default(cuid())
  orderId      String
  productId    String
  productName  String
  productImage String
  quantity     Int
  unitPrice    Float
  totalPrice   Float
  packageType  String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  order        Order    @relation(fields: [orderId], references: [id])
  product      Product  @relation(fields: [productId], references: [id])
}

model CartItem {
  id              String   @id @default(cuid())
  userId          String
  productId       String
  quantity        Int
  selectedPackage String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  product         Product  @relation(fields: [productId], references: [id])
  user            User     @relation(fields: [userId], references: [id])

  @@unique([userId, productId, selectedPackage])
}

enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}
